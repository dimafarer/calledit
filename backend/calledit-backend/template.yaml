AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  calledit-backend
  Sample SAM Template for calledit-backend

Globals:
  Function:
    Timeout: 60
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON 
  Api:
    TracingEnabled: true

Resources:
  CallitAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: CallitAPI
      StageName: Prod
      TracingEnabled: true
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn     
      Cors:
        AllowMethods: '''GET,POST,OPTIONS'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        AllowOrigin: '''*'''
        MaxAge: '''600'''
        AllowCredentials: '''true'''

  HelloWorldFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: handlers/hello_world/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            Path: /hello
            Method: get
            RestApiId: !Ref CallitAPI
    Metadata:
      Debug: true             
 
  PromptBedrockFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "bedrock:InvokeModel"
                - "bedrock:ListFoundationModels"
              Resource: "*"
      CodeUri: handlers/prompt_bedrock/
      Handler: prompt_bedrock.lambda_handler
      Runtime: python3.12
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            Path: /prompt_bedrock
            Method: get
            RestApiId: !Ref CallitAPI
    Metadata:
      Debug: true  


  PromptAgent:
    Type: AWS::Serverless::Function 
    Properties:
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "bedrock:InvokeModel"
                - "bedrock:InvokeModelWithResponseStream"
                - "bedrock:ListFoundationModels"
              Resource: "*"
      CodeUri: handlers/prompt_agent/
      Handler: agent.lambda_handler
      Runtime: python3.12
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            Path: /prompt_agent
            Method: get
            RestApiId: !Ref CallitAPI
    Metadata:
      Debug: true   

  StrandsMakeCall:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: handlers/strands_make_call/
      Handler: strands_make_call.lambda_handler
      Runtime: python3.12
      Architectures:
      - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "bedrock:InvokeModel"
                - "bedrock:InvokeModelWithResponseStream"
                - "bedrock:ListFoundationModels"
              Resource: "*"
      Events:
        MakeCall:
          Type: Api 
          Properties:
            Path: /strands-make-call
            Method: get
            RestApiId: !Ref CallitAPI

  MakeCall:
    Type: AWS::Serverless::Function 
    Properties:
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "bedrock:InvokeModel"
                - "bedrock:ListFoundationModels"
              Resource: "*"
      CodeUri: handlers/make_call/
      Handler: make_call.lambda_handler
      Runtime: python3.12
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            Path: /make-call
            Method: get
            RestApiId: !Ref CallitAPI
    Metadata:
      Debug: true           

  LogCall:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: handlers/write_to_db/
      Handler: write_to_db.lambda_handler
      Runtime: python3.12
      Architectures:
      - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: calledit-db
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            Path: /log-call
            Method: post
            RestApiId: !Ref CallitAPI
            Auth:
              Authorizer: CognitoAuthorizer
              
  ListPredictions:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: handlers/list_predictions/
      Handler: list_predictions.lambda_handler
      Runtime: python3.12
      Architectures:
      - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: calledit-db
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            Path: /list-predictions
            Method: get
            RestApiId: !Ref CallitAPI
            Auth:
              Authorizer: CognitoAuthorizer

  AuthTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/auth_token/
      Handler: auth_token.lambda_handler
      Runtime: python3.12
      Architectures:
      - x86_64
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
          CLIENT_ID: !Ref UserPoolClient
      Events:
        AuthToken:
          Type: Api
          Properties:
            Path: /auth/token
            Method: post
            RestApiId: !Ref CallitAPI


  # Add this to your existing Resources section
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-user-pool
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      # Add email configuration
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      # Add verification message customization
      EmailVerificationMessage: "Your verification code is {####}"
      EmailVerificationSubject: "Your verification code"          

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Sub ${AWS::StackName}-client
      GenerateSecret: false
      # Add token validity durations (in days)
      RefreshTokenValidity: 30      # Extend from default 30 days to max allowed
      AccessTokenValidity: 1        # Extend from default 1 hour to 1 day (max 1 day)
      IdTokenValidity: 1            # Extend from default 1 hour to 1 day (max 1 day)
      EnableTokenRevocation: true
      # Add OAuth configuration
      CallbackURLs: 
        - http://localhost:5173/
        - https://d2k653cdpjxjdu.cloudfront.net/
      LogoutURLs:
        - http://localhost:5173/
        - https://d2k653cdpjxjdu.cloudfront.net/
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
        - COGNITO
      # Enable authorization code grant flow
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      PreventUserExistenceErrors: ENABLED


  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref CognitoUserPool
      Domain: !Sub ${AWS::StackName}-${AWS::AccountId}-domain

  # WebSocket API resources
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: CalledItWebSocketAPI
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectIntegration

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectIntegration

  MakeCallStreamRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: makecall
      AuthorizationType: NONE
      OperationName: MakeCallStreamRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref MakeCallStreamIntegration

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectFunction.Arn}/invocations

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectFunction.Arn}/invocations

  MakeCallStreamIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MakeCallStreamFunction.Arn}/invocations

  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - MakeCallStreamRoute
    Properties:
      ApiId: !Ref WebSocketApi

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      DeploymentId: !Ref WebSocketDeployment
      StageName: prod
      AutoDeploy: true

  # Lambda functions for WebSocket API
  ConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/websocket/
      Handler: connect.lambda_handler
      Runtime: python3.12
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'

  DisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/websocket/
      Handler: disconnect.lambda_handler
      Runtime: python3.12
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'

  MakeCallStreamFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/strands_make_call/
      Handler: strands_make_call_stream.lambda_handler
      Runtime: python3.12
      Timeout: 300  # 5 minutes
      MemorySize: 512
      Policies:
        - DynamoDBCrudPolicy:
            TableName: calledit-db
        - Statement:
            - Effect: Allow
              Action:
                - 'bedrock:InvokeModel'
                - 'bedrock:InvokeModelWithResponseStream'
                - 'bedrock:ListFoundationModels'
              Resource: '*'
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'

  # Lambda permissions
  ConnectFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$connect'

  DisconnectFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DisconnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$disconnect'

  MakeCallStreamFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MakeCallStreamFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/makecall'

  # Verification System Resources
  VerificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-verification"
      CodeUri: handlers/verification/
      Handler: app.lambda_handler
      Runtime: python3.12
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          DYNAMODB_TABLE: calledit-db
          S3_BUCKET: !Ref VerificationLogsBucket
          SNS_TOPIC_ARN: !Ref VerificationNotificationTopic
      Policies:
        - DynamoDBCrudPolicy:
            TableName: calledit-db
        - S3CrudPolicy:
            BucketName: !Ref VerificationLogsBucket
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt VerificationNotificationTopic.TopicName
        - Statement:
            - Effect: Allow
              Action:
                - 'bedrock:InvokeModel'
                - 'bedrock:InvokeModelWithResponseStream'
              Resource: '*'
      Events:
        ScheduledVerification:
          Type: Schedule
          Properties:
            Schedule: 'rate(15 minutes)'  # Every 15 minutes
            Description: Automated prediction verification every 15 minutes
            Input: |
              {
                "source": "eventbridge",
                "action": "verify_predictions",
                "limit": null
              }

  # S3 Bucket for Verification Logs
  VerificationLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-verification-logs-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldLogs
            Status: Enabled
            ExpirationInDays: 90
          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA

  # SNS Topic for Verification Notifications
  VerificationNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${AWS::StackName}-verification-notifications"
      DisplayName: CalledIt Verification Notifications

  # Notification Management Function
  NotificationManagementFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-notification-management"
      CodeUri: handlers/notification_management/
      Handler: app.lambda_handler
      Runtime: python3.12
      Timeout: 30
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref VerificationNotificationTopic
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt VerificationNotificationTopic.TopicName
        - Statement:
            - Effect: Allow
              Action:
                - 'sns:Subscribe'
                - 'sns:Unsubscribe'
                - 'sns:ListSubscriptionsByTopic'
              Resource: !Ref VerificationNotificationTopic
      Events:
        SubscribeNotifications:
          Type: Api
          Properties:
            Path: /subscribe-notifications
            Method: post
            RestApiId: !Ref CallitAPI
            Auth:
              Authorizer: CognitoAuthorizer
        UnsubscribeNotifications:
          Type: Api
          Properties:
            Path: /unsubscribe-notifications
            Method: post
            RestApiId: !Ref CallitAPI
            Auth:
              Authorizer: CognitoAuthorizer
        NotificationStatus:
          Type: Api
          Properties:
            Path: /notification-status
            Method: get
            RestApiId: !Ref CallitAPI
            Auth:
              Authorizer: CognitoAuthorizer

Outputs:
  HelloWorldApi:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    # Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
    Value: !Sub "https://${CallitAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt HelloWorldFunctionRole.Arn

  # Add these to your existing Outputs section
  UserPoolId:
    Description: ID of the Cognito User Pool
    Value: !Ref CognitoUserPool
  UserPoolClientId:
    Description: ID of the Cognito User Pool Client
    Value: !Ref UserPoolClient
  UserPoolDomain:
    Description: Domain name of the Cognito User Pool
    Value: !Sub ${AWS::StackName}-${AWS::AccountId}-domain.auth.${AWS::Region}.amazoncognito.com    
  HostedUIURL:
    Description: Hosted UI URL for sign-in
    Value: !Sub https://${AWS::StackName}-${AWS::AccountId}-domain.auth.${AWS::Region}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&scope=email+openid+profile&redirect_uri=localhost:5173
  WebSocketApiEndpoint:
    Description: "WebSocket API endpoint URL"
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${WebSocketStage}"
  
  # Verification System Outputs
  VerificationFunctionArn:
    Description: ARN of the verification Lambda function
    Value: !GetAtt VerificationFunction.Arn
  
  VerificationLogsBucket:
    Description: Name of the S3 verification logs bucket
    Value: !Ref VerificationLogsBucket
  
  VerificationNotificationTopic:
    Description: ARN of the SNS notification topic
    Value: !Ref VerificationNotificationTopic

